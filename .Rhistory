library(MASS)
library(ISLR)
install.packages("ISLR")
library(ISLR)
fix(Boston)
names(Boston)
?Boston
lm.fit = lm(medv~lstat, data=Boston)
attach(Boston)
lm.fit = lm(medv~lstat)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit, data.frame(lstat =c(5, 10, 15)), interval = "confidence")
predict(lm.fit, data.frame(lstat=c(5, 10, 15)), interval = "prediction")
plot(lstat, medv)
abline(lm.fit)
abline(lm.fit, lwd=3)
abline(lm.fit, lwd=3, col="red")
plot(lstat, medv, col="red")
plot(lstat, medv, pch = 20)
plot(lstat, medv, pch="+")
plot(1:20, 1:20, pch = 1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
lm.fit = lm(medv~lstat+age, data=Boston)
summary(lm.fit)
lm.fit = lm(medv~., data = Boston)
summary(lm.fit)
library(car)
install.package("car")
install.packages("car")
library(car)
vif(lm.fit)
summary(lm(medv~lstat*age, data=Boston))
lm.fit2 = lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
lm.fit = lm(medv~lstat)
anova(lm.fit, lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
lm.fit5 = lm(medv~poly(lstat,5))
summary(lm.fit5)
summary(lm(medv~log(rm), data=Boston))
fix(Carseats)
names(Carseats)
lm.fit = lm(Sales~. +Income:Advertising + Price:Age, data = Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
?contrasts
LoadLibraries()
LoadLibraries = function(){}
LoadLibraries = function(){
library(ISLR)
library(MASS)
print("The libraries have been loaded.")
}
LoadLibraries
LoadLibraries()
#This allows us to create our own functions.
save.image("~/Machine_Learning_Practice_1.RData")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite()
for f in `cat files`; do STAR --genomeDir ../STAR/ENSEMBL.homo_sapiens.release-75 \
--readFilesIn fastq/$f\_1.fastq fastq/$f\_2.fastq \
--runThreadN 12 --outFileNamePrefix aligned/$f.; done
library("airway")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("airway")
library("airway")
dir <- system.file("extdata", package="airway", mustWork=TRUE)
list.files(dir)
csvfile <- file.path(dir, "sample_table.csv")
sampleTable <- read.csv(csvfile,row.names=1)
sampleTable
filenames <- file.path(dir, paste0(sampleTable$Run, "_subset.bam"))
file.exists(filenames)
library("Rsamtools")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("Rsamtools")
library("Rsamtools")
bamfiles <- BamFileList(filenames, yieldSize=2000000)
seqinfo(bamfiles[1])
library("GenomicFeatures")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicFeatures")
library("GenomicFeatures")
gtffile <- file.path(dir,"Homo_sapiens.GRCh37.75_subset.gtf")
txdb <- makeTxDbFromGFF(gtffile, format="gtf", circ_seqs=character())
txdb
ebg <- exonsBy(txdb, by="gene")
ebg
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicAlignments")
library("GenomicAlignments")
library("BiocParallel")
register(SerialParam())
se <- summarizeOverlaps(features=ebg, reads=bamfiles,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=TRUE)
x <- state.cbb
x <- state.ebb
x <- state.abb
x
ls()
n <- length(x)
i <- which(x == "CT")
n
i
ord <- c(i:n, (i-1):1)
ord
xx <- x[ord]
xx
install.packages(c("roxygen2", "devtools"))
getwd()
setwd(".")
devtools::create(path = "mypackage", rstudio = FALSE)
vim DESCRIPTION
vim DESCRIPTION
rightleftorder <- function(n, i)
{
c(i:n, (i-1):1)
}
sort_rightleft <- function(x, i) {
n <- length(x)
ord <- rightleftorder(n, i)
x[ord]
}
devtools::check()
devtools::check()
devtools::check()
?order
setwd("mypackage")
devtools::create(path = "mypackage", rstudio = FALSE)
setwd("mypackage")
devtools::create(path = "mypackage", rstudio = FALSE)
knitr::opts_chunk$set(eval = FALSE)
devtools::create(path = "mypackage", rstudio = FALSE)
install.packages(c("roxygen2", "devtools"))
install.packages(c("roxygen2", "devtools"))
devtools::install()
devtools::create(path = "mypackage", rstudio = FALSE)
getwd()
install.packages(c("roxygen2", "devtools"))
install.packages(c("roxygen2", "devtools"))
devtools::create(path = "mypackage", rstudio = FALSE)
list.files()
getwd()
load("/Applications/R.app")
devtools::create(path = "mypackage", rstudio = FALSE)
install.packages(c("roxygen2", "devtools"))
install.packages(c("roxygen2", "devtools"))
devtools::check()
getwd()
list.file()
list.files()
setwd("mypackage")
list.files()
devtools::check()
devtools::install()
library(mypackage)
?sort_rightleft
